/*
 * Meran - MERAN UNLP is a ILS (Integrated Library System) wich provides Catalog,
 * Circulation and User's Management. It's written in Perl, and uses Apache2
 * Web-Server, MySQL database and Sphinx 2 indexing.
 * Copyright (C) 2009-2013 Grupo de desarrollo de Meran CeSPI-UNLP
 *
 * This file is part of Meran.
 *
 * Meran is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Meran is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Meran.  If not, see <http://www.gnu.org/licenses/>.
 */


module.exports = installedShallow

var npm = require("../../npm.js")
  , fs = require("graceful-fs")
  , path = require("path")
  , readJson = require("../read-json.js")
  , asyncMap = require("slide").asyncMap

function installedShallow (opts, filter, cb) {
  if (typeof cb !== "function") cb = filter, filter = null
  var conf = opts.conf
    , args = conf.argv.remain
  if (args.length > 3) return cb()
  var local
    , global
    , localDir = npm.dir
    , globalDir = npm.globalDir
  if (npm.config.get("global")) local = [], next()
  else fs.readdir(localDir, function (er, pkgs) {
    local = (pkgs || []).filter(function (p) {
      return p.charAt(0) !== "."
    })
    next()
  })
  fs.readdir(globalDir, function (er, pkgs) {
    global = (pkgs || []).filter(function (p) {
      return p.charAt(0) !== "."
    })
    next()
  })
  function next () {
    if (!local || !global) return
    filterInstalled(local, global, filter, cb)
  }
}

function filterInstalled (local, global, filter, cb) {
  var fl
    , fg

  if (!filter) {
    fl = local
    fg = global
    return next()
  }

  asyncMap(local, function (p, cb) {
    readJson(path.join(npm.dir, p, "package.json"), function (er, d) {
      if (!d || !filter(d)) return cb(null, [])
      return cb(null, d.name)
    })
  }, function (er, local) {
    fl = local || []
    next()
  })

  var globalDir = npm.globalDir
  asyncMap(global, function (p, cb) {
    readJson(path.join(globalDir, p, "package.json"), function (er, d) {
      if (!d || !filter(d)) return cb(null, [])
      return cb(null, d.name)
    })
  }, function (er, global) {
    fg = global || []
    next()
  })

  function next () {
    if (!fg || !fl) return
    if (!npm.config.get("global")) {
      fg = fg.map(function (g) {
        return [g, "-g"]
      })
    }
    console.error("filtered", fl, fg)
    return cb(null, fl.concat(fg))
  }
}
