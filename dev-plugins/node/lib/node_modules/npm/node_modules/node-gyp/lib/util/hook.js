/*
 * Meran - MERAN UNLP is a ILS (Integrated Library System) wich provides Catalog,
 * Circulation and User's Management. It's written in Perl, and uses Apache2
 * Web-Server, MySQL database and Sphinx 2 indexing.
 * Copyright (C) 2009-2013 Grupo de desarrollo de Meran CeSPI-UNLP
 *
 * This file is part of Meran.
 *
 * Meran is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Meran is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Meran.  If not, see <http://www.gnu.org/licenses/>.
 */


/**
 * This is our "Hook" class that allows a script to hook into the lifecyle of the
 * "configure", "build" and "clean" commands. It's basically a hack into the
 * module.js file to allow custom hooks into the module-space, specifically to
 * make the global scope act as an EventEmitter.
 */

var fs = require('fs')
  , path = require('path')
  , Module = require('module')
  , EventEmitter = require('events').EventEmitter
  , functions = Object.keys(EventEmitter.prototype).filter(function (k) {
      return typeof EventEmitter.prototype[k] == 'function'
    })
  , boilerplate = functions.map(function (k) {
      return 'var ' + k + ' = module.emitter.' + k + '.bind(module.emitter);'
    }).join('')

module.exports = createHook
function createHook (filename, callback) {

  var emitter = new EventEmitter

  // first read the file contents
  fs.readFile(filename, 'utf8', function (err, code) {
    if (err) {
      if (err.code == 'ENOENT') {
        // hook file doesn't exist, oh well
        callback(null, emitter)
      } else {
        callback(err)
      }
      return
    }
    // got a hook file, now execute it
    var mod = new Module(filename)
    mod.filename = filename
    mod.paths = Module._nodeModulePaths(filename)
    mod.emitter = emitter
    try {
      mod._compile(boilerplate + code, filename)
    } catch (e) {
      return callback(e)
    }
    callback(null, emitter)
  })
}
