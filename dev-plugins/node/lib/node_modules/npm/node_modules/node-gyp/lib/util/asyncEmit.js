/*
 * Meran - MERAN UNLP is a ILS (Integrated Library System) wich provides Catalog,
 * Circulation and User's Management. It's written in Perl, and uses Apache2
 * Web-Server, MySQL database and Sphinx 2 indexing.
 * Copyright (C) 2009-2013 Grupo de desarrollo de Meran CeSPI-UNLP
 *
 * This file is part of Meran.
 *
 * Meran is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Meran is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Meran.  If not, see <http://www.gnu.org/licenses/>.
 */


/**
 * An `asyncEmit()` function that accepts an EventEmitter, an Array of args, and
 * a callback function. If the emitter listener function has an arity
 * > args.length then there is an assumed callback function on the emitter, which
 * means that it is doing some async work. We have to wait for the callbacks for
 * any async listener functions.
 *
 * It works like this:
 *
 *   var emitter = new EventEmitter
 *
 *   // this is an async listener
 *   emitter.on('something', function (val, done) {
 *     // val may be any number of input arguments
 *     setTimeout(function () {
 *       done()
 *     }, 1000)
 *   })
 *
 *   // this is a sync listener, no callback function
 *   emitter.on('something', function (val) {
 *
 *   })
 *
 *   asyncEmit(emitter, 'something', [ 5 ], function (err) {
 *     if (err) throw err
 *     console.log('DONE!')
 *   })
 */

module.exports = asyncEmit
function asyncEmit (emitter, eventName, args, callback) {

  if (typeof args == 'function') {
    callback = args
    args = []
  }

  var async = emitter.listeners(eventName).filter(function (func) {
    return func.length > args.length
  }).length

  var argv = [ eventName ].concat(args)

  // callback function
  argv.push(function (err) {
    if (err && !callback.called) {
      callback.called = true
      callback(err)
    }
    --async || callback()
  })

  // no async listeners
  if (async === 0) {
    process.nextTick(callback)
  }

  return emitter.emit.apply(emitter, argv)
}
